@startuml

skinparam ClassBorderColor black
skinparam ClassBackgroundColor white

package poker {
package game {
    class PokerGame {
        +static constexpr size_t MAX_PLAYERS = 7
        +static constexpr size_t MIN_PLAYERS = 2;
        -bool m_playing
        -IState* m_state
        -vector<shared_ptr<AParticipant>> m_participants
        -vector<shared_ptr<AParticipant>> m_curParticipants
        -Deck m_deck
        -BettingOptions m_bettingOptions
        -unsigned m_pot
        -unsigned m_curBet
        +PokerGame()
        +void addParticipant(shared_ptr<AParticipant> p)
        +void processTurn()
        +void setState(IState* state)
        +bool playing() const;
        +vector<shared_ptr<AParticipant>> getParticipants()
        +vector<shared_ptr<AParticipant>> getCurParticipants()
        +bool removeCurParticipant(shared_ptr<AParticipant p)
        +void deal(size_t numCards, shared_ptr<AParticipant> p)
        +void deal(size_t numCards, AParticipant *p)
        +void newRound()
        +void addToPot(unsigned amount)
        +unsigned flushPot()
        +unsigned getPot() const
        +unsigned getCurBet() const
        +void setCurBet(unsigned amount)
        +BettingOptions &getBettingOptions()
        +void endGame()
    }

    abstract AParticipant {
        #Hand m_hand
        #unsigned m_money
        #PokerGame *m_game
        #const unsigned m_minBet
        #AParticipant(PokerGame *game, unsigned money, unsigned minBet)
        +virtual void processAnteRound() = 0
        +virtual BettingResult processBettingRound() = 0
        +virtual void processDrawRound() = 0
        +virtual void processEvaluateRound() = 0
        +virtual void winMessage() = 0
        +Hand &hand()
        +void addMoney(unsigned amount)
        +unsigned removeMoney(unsigned amount)
    }

    interface IState {
        +virtual void processTurn() = 0
    }
    hide IState attributes

    class Player {
        +const size_t m_playerNum
        +Player(PokerGame *game, size_t playerNum, unsigned money, unsigned minBet)
        +void processAnteRound() override
        +BettingResult processBettingRound() override
        +void processDrawRound() override
        +void processEvaluateRound() override
        +void winMessage() override
        -bool queryOption(unsigned &option)
        -bool queryBet(unsigned &bet)
        -bool queryReplaceCards(unsigned &numCards)
        -bool queryReplacementCard()
    }

    class Cpu {
        +const size_t m_cpuNum
        +Cpu(PokerGame *game, size_t cpuNum, unsigned money, unsigned minBet)
        +void processBettingRound() override
        +BettingResult processBettingRound() override
        +void processDrawRound() override
        +void processEvaluateRound() override
        +void winMessage() override
    }

    class BettingOptions {
        -map<unsigned, pair<bool, string>> m_options
        +BettingOptions()
        +void reset()
        +void open()
        +bool isValidOption(unsigned opt)
        +vector<unsigned> getValidOptions() const
    }

    enum BettingResult {
        FOLD
        CHECK
        BET
    }
    hide BettingResult methods

    PokerGame o-- AParticipant
    PokerGame -> IState
    Cpu -|> AParticipant
    AParticipant <|-- Player
    BettingOptions *- PokerGame
    BettingResult <-- AParticipant
}
}

@enduml
#include "framework/Card.h"
#include "framework/Hand.h"
#include "framework/HandComparator.h"
#include "gtest/gtest.h"

TEST(HandComparatorTests, TestRoyalFlush)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::ACE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
}
TEST(HandComparatorTests, TestStraightFlush)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestFourOfKind)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestFullHouse)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestFlush)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::DIAMONDS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::DIAMONDS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestStraight)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestThreeOfKind)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::DIAMONDS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestTwoPair)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestOnePair)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::NINE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::KING, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}
TEST(HandComparatorTests, TestHighCard)
{
    Hand h1{};
    h1.addCard(std::make_unique<const Card>(Face::KING, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::TWO, Suit::HEARTS));
    Hand h2{};
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::JACK, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::THREE, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::QUEEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FIVE, Suit::HEARTS));
    h2.addCard(std::make_unique<const Card>(Face::TWO, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 1);
    h1.clear();
    h2.clear();
    h1.addCard(std::make_unique<const Card>(Face::TEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::SPADES));
    h1.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::CLUBS));
    h1.addCard(std::make_unique<const Card>(Face::SIX, Suit::HEARTS));
    h1.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::TEN, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::EIGHT, Suit::DIAMONDS));
    h2.addCard(std::make_unique<const Card>(Face::SEVEN, Suit::SPADES));
    h2.addCard(std::make_unique<const Card>(Face::SIX, Suit::CLUBS));
    h2.addCard(std::make_unique<const Card>(Face::FOUR, Suit::CLUBS));
    EXPECT_EQ(HandComparator::compare(h1, h2), 0);
}